	// some code we want to execute as guest
	const uint8_t code[] = {0xba, 0xf8, 0x03, /* mov $0x3f8, %dx */};

	// open kvm device
    int kvm = open("/dev/kvm", O_RDWR | O_CLOEXEC);

	// this handle represents the actual virtual machine
	int vmfd = ioctl(kvm, KVM_CREATE_VM, (unsigned long)0);

	// allocate some "physical" memory for VM
	void *mem = mmap(NULL, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);

	// copy guest code to vm memory
	memcpy(mem, code, sizeof(code));

	// let VM know about it's memory
	struct kvm_userspace_memory_region region = {
	.slot = 0,
	.guest_phys_addr = 0x1000,
	.memory_size = 0x1000,
	.userspace_addr = (uint64_t)mem,
    };
    ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, &region);

	// we added vRAM, now let's add vCPU
	int vcpufd = ioctl(vmfd, KVM_CREATE_VCPU, (unsigned long)0);

	// get size for vCPU state struct (exit to VMM reason)
	int mmap_size = ioctl(kvm, KVM_GET_VCPU_MMAP_SIZE, NULL);

	// map aforementions struct to kvm_run
	struct kvm_run *run = mmap(NULL, mmap_size, PROT_READ | PROT_WRITE, MAP_SHARED, vcpufd, 0);

	// set base registers
	struct kvm_sregs sregs;
    ioctl(vcpufd, KVM_GET_SREGS, &sregs);
    sregs.cs.base = 0;
    sregs.cs.selector = 0;
    ioctl(vcpufd, KVM_SET_SREGS, &sregs);

	// set standard registers - set rip to guest code
    struct kvm_regs regs = {
	.rip = 0x1000,
	.rax = 2,
	.rbx = 2,
	.rflags = 0x2,
    };
    ioctl(vcpufd, KVM_SET_REGS, &regs);

	// run vm until guest exits, handle, return to guest
    while (1) {
		ioctl(vcpufd, KVM_RUN, NULL);
		switch (run->exit_reason) {
		/* Handle exit */
		
		// in case HLT instruction was executed from guest
		case KVM_EXIT_HLT:
	    	puts("KVM_EXIT_HLT");
	    	return 0;

		// in case OUT\IN instruction was executed from guest
		case KVM_EXIT_IO:
			if (run->io.direction == KVM_EXIT_IO_OUT &&
				run->io.size == 1 &&
				run->io.port == 0x3f8 &&
				run->io.count == 1)
				putchar(*(((char *)run) + run->io.data_offset));
			else
				errx(1, "unhandled KVM_EXIT_IO");
			break;
	}